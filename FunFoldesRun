#!/bin/bash

# Default

script_dir=$(dirname $(readlink -f $0))
rosetta_vall=${rosetta_tools}
rosetta_db=${rosetta_db}
rosetta_app=${rosetta_app}
receptor_chain="A"
design_param="D"
Scoring="Normal"
sasa_cutoff=20
packstat_threshold=0.64
relax_level="FFLSTANDARD_MOVEMAP"
CPUnum=28
locally=false
nstructs=100
rmsd_threshold=5
cpu_queue=siais_cpu_1

function usage(){
cat<<USAGE

Rosetta FunFoldes Pipeline.

Usage: FunFoldesRun -M motif.pdb -T <template_dir> ...

Input Options:
    -T  Required, Template/Scaffold PDB file.
    -M  Required, PDB file for Epitope or Functional Motif and its recptor/antibody.
    -m  Required, Epitope or Functional Motif Region of "-M" PDB. 
            such as, "20A-35A" for linear motif,"20A-35A:60A-68A" for frags. "A" is chainname.
    -i  Required, insertion region in "-T" PDB.
            such as, 20A-35A. "A" is chainname.
    -t  Required, scaffold chain name or residue region in "-T" PDB.
            such as, "ch:A" means chain A; "res:20A-35A" means 20-35 in chain A.
    -r  Required, chain name of recptor/antibody. such as, "H,L" or "A". <A>
    -D  May be required, Chain name to designed chain, opposite to "-r". <D>
    -A  Optional, Bio-Assembly PDB file for Template/Scaffold. (Not enabled)

Designing Options:
    -S  Scoring Function Type. <Normal>
            Normal: ref2015 and no extra reweight.
            helix-favor: ref2015 and helix-favor.
            Science2020: Score function in Science 15 May 2020.
            Advance: Science2020 with ref2015.
    -R  Relax Mode in Design. static, pack or packmin. <static>
    -p  nstructs in designing. <100>
    -Y  RMSD threshold for desgin. <5>
    -F  Fixed Region for Template/Scaffold. (Not enabled)

Job management system Options:
    -x  cpu queues to run this job: <siais_gpu_1>
            locally, running in localhost;
            siais_cpu_1, 8 nodes * 28 cores;
            amdnode, 16 nodes * 64 cores;
            normal, 28 cores per nodes;
            siais_cpu_2, 5 nodes * 36 cores.
    -n  The max cpu number for this job. <28>
    
Rosetta env Options:
    -a  Path for rosetta apps. <${rosetta_app}>
    -d  Path to rosetta database. <${rosetta_db}>
    -v  Path to rosetta tools. <${rosetta_tools}>

Thank you for your using, If you found any problem, Please contact wanglin3@shanghaitech.edu.cn.
USAGE
}

function make_xml(){
    ###################################
##  The FunFolDes.xml is a control file for full workfolw.
    ###################################
    echo "<ROSETTASCRIPTS>" > ${job_name}.xml
    ###################################
##  centroid: Centroid-level score function is used to \
##      score after NubInitio and in case chainbreak closure is needed.
##  fullatom: Full Atom-level score function is used to \
##      repack disulfides in NubInitio and guide FastDesign.
    ###################################
if [ ${Scoring} == "Science2020" ];then
    if [ ! -f ${rosetta_db}/scoring/weights/talaris2014_lowala.wts ];then
cat << LOWALA > ${rosetta_db}/scoring/weights/talaris2014_lowala.wts
# The Talaris2014 score function represents a small modification to the
# Talaris2013 score function: the weights are all scaled upwards so that
# fa_atr has a weight of 1.0; then the hydrogen bond strengths are decreased
# by 20%.  This has the effect of keeping the hbond strengths fixed while
# everything else gets stronger.
#
# The benchmarking performed for the O'Meara et al. (2014) hbond paper
# showed that weakening the hbond weights by 20% improved sequence recovery,
# rotamer recovery, and decoy discrimination.  This weight set is
# currently the official gold standard weight set for Rosetta.
#
# Reference energies were fit with optE on Jane Richardson's HiQ54 benchmark
# set in triplicate, and tested on the Ding & Dokholyan 38 set.  The
# set of reference energies with the highest sequence recovery (39.8%) was
# chosen.
# Amino acids are in alphabetical order of their one letter code. 
#

METHOD_WEIGHTS ref 2.00 0.443793 -1.63002 -1.96094 0.61937 0.173326 0.388298 1.0806 -0.358574 0.761128 0.249477 -1.19118 -0.250485 -1.51717 -0.32436 0.165383 0.20134 0.979644 1.23413 0.162496 
fa_atr 1
fa_rep 0.55
fa_sol 0.9375
fa_intra_rep 0.005
fa_elec 0.875
pro_close 1.25
hbond_sr_bb 1.17
hbond_lr_bb 1.17
hbond_bb_sc 1.17
hbond_sc 1.1
dslf_fa13 1.25
rama 0.35
omega 0.625
fa_dun 0.7
p_aa_pp 0.4
yhh_planarity 0.625
ref 1
LOWALA
    fi
cat << SCORE >> ${job_name}.xml
  <SCOREFXNS>
    <ScoreFunction name="centroid" weights="cen_std" >
	    <Reweight scoretype="atom_pair_constraint" weight="2.0" />
        <Reweight scoretype="angle_constraint" weight="2.0" />
        <Reweight scoretype="dihedral_constraint" weight="2.0" />
	    <Reweight scoretype="chainbreak" weight="2.0"/>
        <Reweight scoretype="linear_chainbreak" weight="2.0"/>
        <Reweight scoretype="overlap_chainbreak" weight="2.0"/>
   </ScoreFunction>
    <ScoreFunction name="fullatom" weights="talaris2014" >
	    <Reweight scoretype="atom_pair_constraint" weight="2.0" />
        <Reweight scoretype="angle_constraint" weight="2.0" />
        <Reweight scoretype="dihedral_constraint" weight="2.0" />
    </ScoreFunction>
    <ScoreFunction name="fullatom_design" weights="talaris2014_lowala.wts" >
        <Reweight scoretype="aa_composition" weight="2.0" />
        <Reweight scoretype="p_aa_pp" weight="0.8" />
        <Reweight scoretype="atom_pair_constraint" weight="2.0" />
        <Reweight scoretype="rama" weight="0.35" />
    </ScoreFunction>
  </SCOREFXNS>
SCORE
elif [ ${Scoring} == "Normal" ];then
cat << SCORE >> ${job_name}.xml
  <SCOREFXNS>
    <ScoreFunction name="centroid" weights="cen_std" >
	    <Reweight scoretype="atom_pair_constraint" weight="1.6" />
   </ScoreFunction>
    <ScoreFunction name="fullatom" weights="ref2015">
	    <Reweight scoretype="atom_pair_constraint" weight="1.6" />
    </ScoreFunction>
    <ScoreFunction name="fullatom_design" weights="ref2015" >
        <Reweight scoretype="aa_composition" weight="2.0" />
        <Reweight scoretype="p_aa_pp" weight="0.8" />
        <Reweight scoretype="atom_pair_constraint" weight="2.0" />
        <Reweight scoretype="rama" weight="0.35" />
    </ScoreFunction>
  </SCOREFXNS>
SCORE
elif [ ${Scoring} == "helix-favor" ];then
cat << SCORE >> ${job_name}.xml
  <SCOREFXNS>
    <ScoreFunction name="centroid" weights="cen_std" >
	    <Reweight scoretype="atom_pair_constraint" weight="1.6" />
        <Reweight scoretype="angle_constraint" weight="2.0" />
        <Reweight scoretype="dihedral_constraint" weight="2.0" />
	    <Reweight scoretype="chainbreak" weight="2.0"/>
        <Reweight scoretype="linear_chainbreak" weight="2.0"/>
        <Reweight scoretype="overlap_chainbreak" weight="2.0"/>
   </ScoreFunction>
    <ScoreFunction name="fullatom" weights="ref2015">
        <Reweight scoretype="hbond_sr_bb"          weight="1.6" />
        <Reweight scoretype="atom_pair_constraint" weight="1.6" />
        <Reweight scoretype="angle_constraint" weight="2.0" />
        <Reweight scoretype="dihedral_constraint" weight="2.0" />
    </ScoreFunction>
    <ScoreFunction name="fullatom_design" weights="ref2015" >
        <Reweight scoretype="hbond_sr_bb"          weight="1.6" />
        <Reweight scoretype="aa_composition" weight="2.0" />
        <Reweight scoretype="p_aa_pp" weight="0.8" />
        <Reweight scoretype="atom_pair_constraint" weight="1.6" />
        <Reweight scoretype="rama" weight="0.35" />
    </ScoreFunction>
  </SCOREFXNS>
SCORE
elif [ ${Scoring} == "Advance" ];then
cat << SCORE >> ${job_name}.xml
  <SCOREFXNS>
    <ScoreFunction name="centroid" weights="cen_std" >
	    <Reweight scoretype="atom_pair_constraint" weight="2.0" />
        <Reweight scoretype="angle_constraint" weight="2.0" />
        <Reweight scoretype="dihedral_constraint" weight="2.0" />
	    <Reweight scoretype="chainbreak" weight="2.0"/>
        <Reweight scoretype="linear_chainbreak" weight="2.0"/>
        <Reweight scoretype="overlap_chainbreak" weight="2.0"/>
   </ScoreFunction>
    <ScoreFunction name="fullatom" weights="ref2015">
	    <Reweight scoretype="atom_pair_constraint" weight="2.0" />
        <Reweight scoretype="angle_constraint" weight="2.0" />
        <Reweight scoretype="dihedral_constraint" weight="2.0" />
    </ScoreFunction>
    <ScoreFunction name="fullatom_design" weights="ref2015" >
        <Reweight scoretype="aa_composition" weight="2.0" />
        <Reweight scoretype="p_aa_pp" weight="0.8" />
        <Reweight scoretype="atom_pair_constraint" weight="2.0" />
        <Reweight scoretype="rama" weight="0.35" />
    </ScoreFunction>
  </SCOREFXNS>
SCORE
else
    echo "Error: Unknown Socring Function ${Scoring} !"
    exit
fi
    ###################################
##  To properly run FunFolDes, one needs to add the ResidueSelectors to \
##  pick each of the working labels and guide the non-fixed parts of the process. 
    ###################################
motif_command=""
motif_names=""
for motif in ${motif_array[@]}; do
    motif_command=${motif_command}$(echo " <Index name=\"motif_${motif}\" resnums=\"${motif}\" />
    ")
    motif_names=${motif_names}$(echo "motif_${motif},")
done
insertion_command=""
insertion_names=""
for insertion in ${insertion_region[@]}; do
    insertion_command=${insertion_command}$(echo " <Index name=\"motif_insertion_${insertion}\" resnums=\"${insertion}\" />
    ")
    insertion_names=${insertion_names}$(echo "motif_insertion_${insertion},")
done
cat << SELECTORS >> ${job_name}.xml
  <RESIDUE_SELECTORS>
    # Basic Selectors
    <ResiduePDBInfoHasLabel name="MOTIF"    property="MOTIF" />
    <ResiduePDBInfoHasLabel name="TEMPLATE" property="TEMPLATE" />
    <ResiduePDBInfoHasLabel name="CONTEXT"  property="CONTEXT" />
    <ResiduePDBInfoHasLabel name="FLEXIBLE" property="FLEXIBLE" />
    <ResiduePDBInfoHasLabel name="HOTSPOT"  property="HOTSPOT" />
    <ResiduePDBInfoHasLabel name="COLDSPOT" property="COLDSPOT" />
    <Not                    name="!COLDSPOT" selector="COLDSPOT" />
    <And name="FLEXIBLE_AND_MOTIF" selectors="FLEXIBLE,MOTIF" />
    <And name="COLDSPOT_AND_MOTIF" selectors="COLDSPOT,MOTIF" />
    <And name="HOTSPOT_AND_MOTIF"  selectors="HOTSPOT,MOTIF" />
    <Or name="COLDSPOT_OR_TEMPLATE"             selectors="COLDSPOT,TEMPLATE" />
    <Or name="FLEXIBLE_OR_TEMPLATE"             selectors="FLEXIBLE,TEMPLATE" />
    <Or name="COLDSPOT_OR_FLEXIBLE_OR_TEMPLATE" selectors="COLDSPOT,FLEXIBLE,TEMPLATE" />
    <Or name="CONTEXT_OR_FLEXIBLE_OR_TEMPLATE" selectors="CONTEXT,FLEXIBLE,TEMPLATE" />
    <Or name="COLDSPOT_OR_CONTEXT_OR_FLEXIBLE_OR_TEMPLATE" selectors="COLDSPOT,CONTEXT,FLEXIBLE,TEMPLATE" />
    <Or name="HOTSPOT_OR_CONTEXT"               selectors="HOTSPOT,CONTEXT" />
    <And name="FLEXIBLE_AND_!COLDSPOT"                      selectors="FLEXIBLE,!COLDSPOT" />
    <ProteinResidueSelector name="PROTEIN" />
    <Not name="!PROTEIN" selector="PROTEIN" />
    # loaded RESIDUE_SELECTORS
    ${scaffold_region}
    <Not name="!template" selector="template" />
    ${insertion_command}
    <Or name="insertion" selectors="${insertion_names%%,}" />
	    <Not name="!insertion" selector="insertion" />
    ${motif_command}
    <Or name="query_motif" selectors="${motif_names%%,}" />
    <Chain name="binder" chains="${receptor_chain}" />
    <Chain name="design" chains="${design_param}" />
  </RESIDUE_SELECTORS>
SELECTORS
    ###################################
## FFLSTANDARD_MOVEMAP
## FFLBINDERPACK_MOVEMAP
## FFLBINDERPACKMIN_MOVEMAP
    ###################################
cat << MOVE_MAP >> ${job_name}.xml
  <MOVE_MAP_FACTORIES>
    <MoveMapFactory name="FFLSTANDARD_MOVEMAP" bb="false" chi="false" nu="false" branches="false" jumps="false" >
        <Backbone enable="true" residue_selector="FLEXIBLE_OR_TEMPLATE" />
        <Chi      enable="true" residue_selector="COLDSPOT_OR_FLEXIBLE_OR_TEMPLATE" />
    </MoveMapFactory>
    <MoveMapFactory name="FFLBINDERPACK_MOVEMAP" bb="false" chi="false" nu="false" branches="false" jumps="false" >
        <Backbone enable="true" residue_selector="CONTEXT_OR_FLEXIBLE_OR_TEMPLATE" />
        <Chi      enable="true" residue_selector="COLDSPOT_OR_FLEXIBLE_OR_TEMPLATE" />
    </MoveMapFactory>
    <MoveMapFactory name="FFLBINDERPACKMIN_MOVEMAP" bb="false" chi="false" nu="false" branches="false" jumps="false" >
        <Backbone enable="true" residue_selector="CONTEXT_OR_FLEXIBLE_OR_TEMPLATE" />
        <Chi      enable="true" residue_selector="COLDSPOT_OR_CONTEXT_OR_FLEXIBLE_OR_TEMPLATE" />
    </MoveMapFactory>
  </MOVE_MAP_FACTORIES>
MOVE_MAP

    ###################################
## no design, FFLMOTIF_TASKOP
## side chain repack, FFLFLEX_TASKOP
## flexible design and no cysine, FFLTEMPLATE_TASKOP
## extra side chain conformation, FFLEXTRA_TASKOP
## no dissulfides refinement, FFLTEMPLATE_DISULFIDES
    ###################################
cat << taskoperators >> ${job_name}.xml
  <TASKOPERATIONS>
    <OperateOnResidueSubset name="FFLMOTIF_TASKOP" selector="HOTSPOT_OR_CONTEXT" >
        <PreventRepackingRLT/>
    </OperateOnResidueSubset>
    <OperateOnResidueSubset name="FFLFLEX_TASKOP" selector="FLEXIBLE_AND_!COLDSPOT" >
        <RestrictToRepackingRLT/>
    </OperateOnResidueSubset>
    <OperateOnResidueSubset name="FFLTEMPLATE_TASKOP" selector="COLDSPOT_OR_TEMPLATE" >
        <DisallowIfNonnativeRLT disallow_aas="C" />
    </OperateOnResidueSubset>
    <OperateOnResidueSubset name="FFLEXTRA_TASKOP" selector="COLDSPOT_OR_TEMPLATE" >
        <ExtraRotamersGenericRLT ex1="1" ex2="1" extrachi_cutoff="0" />
    </OperateOnResidueSubset>
        <NoRepackDisulfides name="FFLTEMPLATE_DISULFIDES" />
  </TASKOPERATIONS>
taskoperators
cat << FILTERS >> ${job_name}.xml
  <FILTERS>
    <RmsdFromResidueSelectorFilter name="drift_rmsd" confidence="0"
        reference_name="folded_pose" reference_selector="design"
        query_selector="design" />
    # Make sure to get an evaluation of the design alone
    <ScorePoseSegmentFromResidueSelectorFilter name="design_score" confidence="0"
      residue_selector="design" />
    <CavityVolume name="cav_vol" />
    <BuriedUnsatHbonds name="BuriedUnsatHbondNum" jump_number="0" confidence="0"
      task_operations="FFLMOTIF_TASKOP,FFLFLEX_TASKOP,FFLTEMPLATE_TASKOP" />
    <PackStat name="packstat" threshold="${packstat_threshold}" repeats="3" confidence="0" />
    <ExposedHydrophobics name="exposed_hydrophobic" sasa_cutoff="${sasa_cutoff}" confidence="0"/>
  </FILTERS>
FILTERS
cat << MOVER >> ${job_name}.xml
  <MOVERS>
    # We will save the template so we can, at the end, see how far from it our desing went
    <SavePoseMover name="saveTemplate" restore_pose="0" reference_name="template_pose" />
    <SavePoseMover name="saveFolded" reference_name="folded_pose" restore_pose="0" />
    # Both to create the fragments needed for NubInitio as well as for the NubInitio itself,
    # only one-chain templates can be considered, so we'll need to delete the rest.
    <DeleteRegionMover name="removeExtraChains" residue_selector="!template" />
    # This is one of the alternatives to load the target motif's pdb file.
    <SavePoseMover name="load_target" reference_name="target_pose" pdb_file="motif.pdb" />
    # The creates the fragments (if they need to be created) or loads them from a file
    # into the DataMap with the "frags" identifier (that needs to be specified in the NubInitio).
    <StructFragmentMover name="FragmentPicker" prefix="frags"
      vall_file="${rosetta_vall}/fragment_tools/vall.jul19.2011.gz" output_frag_files="1"
      small_frag_file="frags.200.3mers" large_frag_file="frags.200.9mers" 
    />
    # Constraints have to be used to guide the ab initio folding.
    <AddConstraints name="addCST" >
      <AtomPairConstraintGenerator name="atompairCST" sd="1.0" ca_only="true"
        use_harmonic="true" unweighted="true" min_seq_sep="6" max_distance="40" residue_selector="template"
      />
    </AddConstraints>
    # The NubInitio folding is done here.
    <NubInitioMover name="FFL" fragments_id="frags" template_motif_selector="insertion" use_cst="true"
      clear_motif_cst="false" rmsd_threshold="${rmsd_threshold}" fullatom_scorefxn="fullatom" >
      <Nub reference_name="target_pose" residue_selector="query_motif" binder_selector="binder" >
        <Segment order="1" n_term_flex="3" c_term_flex="3" />
      </Nub>
    </NubInitioMover>
    # Edit the sequence to stabilize the protein
    <FastDesign name="DesignRelax" scorefxn="fullatom_design"
		clear_designable_residues="true"
               task_operations="FFLMOTIF_TASKOP,FFLFLEX_TASKOP,FFLTEMPLATE_TASKOP"
               repeats="3" delete_virtual_residues_after_FastRelax="true"
               movemap_factory="${relax_level}" >
    </FastDesign>
    <DisplayPoseLabelsMover name="showDesign" movemap_factory="FFLSTANDARD_MOVEMAP"
      task_operations="FFLMOTIF_TASKOP,FFLFLEX_TASKOP,FFLTEMPLATE_TASKOP" />
    <NubInitioLoopClosureMover name="FFLCCD" break_side_ramp="true" fragments_id="frags" design="true" fullatom_scorefxn="fullatom" />
    <ClearConstraintsMover name="cleanCST" />
  </MOVERS>
  <APPLY_TO_POSE>
  </APPLY_TO_POSE>
MOVER
cat << PROTOCOLS >> ${job_name}.xml
  <PROTOCOLS>
    # Preparing Template
    <Add mover="removeExtraChains" />
    <Add mover="saveTemplate" />
    <Add mover="FragmentPicker" />
    <Add mover="addCST" />
    # Fold
    <Add mover="FFL" />
    <Add mover="showDesign" />
    <Add mover="cleanCST" />
    <Add mover="saveFolded"  />
    # Design
    <Add mover="addCST" />
    <Add mover="showDesign" />
    <Add mover="DesignRelax" />
    <Add mover="cleanCST" />
    <Add mover="FFLCCD"/>
    # EVALUATION
    <Add filter="drift_rmsd" />
    <Add filter="cav_vol" />
    <Add filter="packstat" />
    <Add filter="exposed_hydrophobic" />
    <Add filter="BuriedUnsatHbondNum" />
    <Add filter="design_score" />
  </PROTOCOLS>
PROTOCOLS
    echo "<OUTPUT scorefxn=\"fullatom\" />" >> ${job_name}.xml
    echo "</ROSETTASCRIPTS>" >> ${job_name}.xml
}

while getopts ":ha:d:H:S:D:t:i:m:r:T:M:R:n:x:v:p:A:" opt
do
  case $opt in
    h)
        usage
        exit;;
    A)
        Bio_Assembly=$OPTARG;;
    p)
        nstructs=$OPTARG;;
    R)
        Relax_Mode=$OPTARG
        if [ $OPTARG == "pack" ];then
            relax_level="FFLBINDERPACK_MOVEMAP"
        elif [ $OPTARG == "packmin" ];then
            relax_level="FFLBINDERPACKMIN_MOVEMAP"
        elif [ $OPTARG == "static" ];then
            relax_level="FFLSTANDARD_MOVEMAP"
        fi;;
    T)
        Template=`readlink -f $OPTARG`;;
    M)
        Motifpdb=`readlink -f $OPTARG`;;
    m)
        motif_array=(${OPTARG//:/ });;
    i)
        insertion_region=(${OPTARG//:/ });;
    r)
        receptor_chain=$OPTARG;;
    t)
        scaffold_array=(${OPTARG//:/ })
        scaffold_type=${scaffold_array[0]}
        scaffold_params=${scaffold_array[1]}
        if [ ${scaffold_type} == "ch" ];then
            scaffold_region="<Chain name=\"template\" chains=\"${scaffold_params}\" />"
        elif [ ${scaffold_type} == "res" ];then
            scaffold_region="<Index name=\"template\" resnums=\"${scaffold_params}\" />"
        fi;;
    D)
        design_param=$OPTARG;;
    S)
        Scoring=$OPTARG;;
    d)
        rosetta_db=$OPTARG;;
    a)
        rosetta_app=$OPTARG;;
    v)
        rosetta_vall=$OPTARG;;
    n)
        CPUnum=$OPTARG;;
    x)
        cpu_queue=$OPTARG;;
    ?)
        echo ""
        echo "Error: Do not use undefined options."
        echo ""
        usage
        exit;;
    esac
done

# Parse job name and mkdir
job_name=$(basename ${Template%%.pdb})-$(basename ${Motifpdb%%.pdb})-${Scoring}-${Relax_Mode}
mkdir -p ${job_name}_FunFoldes
cd ${job_name}_FunFoldes
cp ${Template} ./$(basename ${Template})
cp ${Motifpdb} ./motif.pdb
mkdir -p FunFoldes_OUT
make_xml
[ ${Scoring} == "Science2020" ] && restore_talaris_behavior="-restore_talaris_behavior true"

if [ $cpu_queue == "locally" ];then
    mpirun -np ${CPUnum} --use-hwthread-cpus ${rosetta_app}/rosetta_scripts.mpi.linuxgccrelease -parser:protocol ${job_name}.xml -s $(basename ${Template}) -out:nstruct ${nstructs} -out:path:pdb FunFoldes_OUT -out:file:scorefile ${job_name}_OUT.sc -ignore_zero_occupancy 0 -in:ignore_unrecognized_res -in:ignore_waters -out:levels protocols.fold_from_loops:500 protocols.relax:500 protocols.denovo_design.movers.FastDesign:500 protocols.rosetta_scripts.ParsedProtocol:500 -out:mute protocols.abinitio ${restore_talaris_behavior}
    exit 
elif [ $cpu_queue == "siais_cpu_1" ];then
nodes_num=`echo "scale=0;${CPUnum} / 28"|bc`
cat<<CPU > ${job_name}_sub.pbs
#PBS -N ${job_name}
#PBS -l nodes=${nodes_num}:ppn=28:centos7
#PBS -S /bin/bash
#PBS -j oe
#PBS -l walltime=360:00:00
#PBS -q siais_cpu_1

module load mpi/openmpi/4.1.1
module load compiler/gnu/8.3.0
cd \$PBS_O_WORKDIR

mpirun -machinefile \${PBS_NODEFILE} -np ${CPUnum} ${rosetta_app}/rosetta_scripts.mpi.linuxgccrelease -parser:protocol ${job_name}.xml -s $(basename ${Template}) -out:nstruct ${nstructs} -out:path:pdb FunFoldes_OUT -out:file:scorefile ${job_name}_OUT.sc -ignore_zero_occupancy 0 -in:ignore_unrecognized_res -in:ignore_waters -out:levels protocols.fold_from_loops:500 protocols.relax:500 protocols.denovo_design.movers.FastDesign:500 protocols.rosetta_scripts.ParsedProtocol:500 -out:mute protocols.abinitio ${restore_talaris_behavior}
CPU
qsub ${job_name}_sub.pbs
elif [ $cpu_queue == "amdnode" ];then
nodes_num=`echo "scale=0;${CPUnum} / 64"|bc`
cat<<CPU > ${job_name}_sub.pbs
#PBS -N ${job_name}
#PBS -l nodes=${nodes_num}:ppn=64:centos7
#PBS -S /bin/bash
#PBS -j oe
#PBS -l walltime=360:00:00
#PBS -q amdnode

module load mpi/openmpi/4.1.1
module load compiler/gnu/8.3.0
cd \$PBS_O_WORKDIR

mpirun -machinefile \${PBS_NODEFILE} -np ${CPUnum} ${rosetta_app}/rosetta_scripts.mpi.linuxgccrelease -parser:protocol ${job_name}.xml -s $(basename ${Template}) -out:nstruct ${nstructs} -out:path:pdb FunFoldes_OUT -out:file:scorefile ${job_name}_OUT.sc -ignore_zero_occupancy 0 -in:ignore_unrecognized_res -in:ignore_waters -out:levels protocols.fold_from_loops:500 protocols.relax:500 protocols.denovo_design.movers.FastDesign:500 protocols.rosetta_scripts.ParsedProtocol:500 -out:mute protocols.abinitio ${restore_talaris_behavior}
CPU
qsub ${job_name}_sub.pbs
elif [ $cpu_queue == "normal" ];then
[ ${CPUnum} -gt 28 ] && echo "Warning: More than 28 of CPU requirements may cause the task to be unable to run."
cat<<CPU > ${job_name}_sub.pbs
#PBS -N ${job_name}
#PBS -l nodes=1:ppn=${CPUnum}:centos7
#PBS -S /bin/bash
#PBS -j oe
#PBS -l walltime=360:00:00
#PBS -q sias_pub_cpu

module load mpi/openmpi/4.1.1
module load compiler/gnu/8.3.0
cd \$PBS_O_WORKDIR

mpirun -np ${CPUnum} ${rosetta_app}/rosetta_scripts.mpi.linuxgccrelease -parser:protocol ${job_name}.xml -s $(basename ${Template}) -out:nstruct ${nstructs} -out:path:pdb FunFoldes_OUT -out:file:scorefile ${job_name}_OUT.sc -ignore_zero_occupancy 0 -in:ignore_unrecognized_res -in:ignore_waters -out:levels protocols.fold_from_loops:500 protocols.relax:500 protocols.denovo_design.movers.FastDesign:500 protocols.rosetta_scripts.ParsedProtocol:500 -out:mute protocols.abinitio ${restore_talaris_behavior}
CPU
qsub ${job_name}_sub.pbs
elif [ $cpu_queue == "siais_cpu_2" ];then
nodes_num=`echo "scale=0;${CPUnum} / 36"|bc`
cat<<CPU > ${job_name}_sub.pbs
#PBS -N ${job_name}
#PBS -l nodes=${nodes_num}:ppn=36:centos7
#PBS -S /bin/bash
#PBS -j oe
#PBS -l walltime=360:00:00
#PBS -q siais_cpu_2

module load mpi/openmpi/4.1.1
module load compiler/gnu/8.3.0
cd \$PBS_O_WORKDIR

mpirun -machinefile \${PBS_NODEFILE} -np ${CPUnum} ${rosetta_app}/rosetta_scripts.mpi.linuxgccrelease -parser:protocol ${job_name}.xml -s $(basename ${Template}) -out:nstruct ${nstructs} -out:path:pdb FunFoldes_OUT -out:file:scorefile ${job_name}_OUT.sc -ignore_zero_occupancy 0 -in:ignore_unrecognized_res -in:ignore_waters -out:levels protocols.fold_from_loops:500 protocols.relax:500 protocols.denovo_design.movers.FastDesign:500 protocols.rosetta_scripts.ParsedProtocol:500 -out:mute protocols.abinitio ${restore_talaris_behavior}
CPU
qsub ${job_name}_sub.pbs
fi